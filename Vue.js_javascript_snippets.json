{
	// Vue.js snippets for Visual Studio Code
	// Author: Md Daudul Islam <md.daudulislamsumon@gmail.com>
	// Creation Date: 31/10/2020
	// Update Date: 10/11/2020

	
	"The Vue Constructor": {
		"prefix": "Vue",
		"body": [
		  "Vue($1)"
		],
		"description": "The Vue Constructor"
	},
	"Provide the Vue instance an existing DOM element to mount on": {
		"prefix": "el",
		"body": [
		  "el: $1"
		],
		"description": "Provide the Vue instance an existing DOM element to mount on"
	},
	"The data object for the Vue instance": {
		"prefix": "data",
		"body": [
		  "data: $1"
		],
		"description": "The data object for the Vue instance"
	},
	"A list/hash of attributes that are exposed to accept data from the parent component": {
		"prefix": "props",
		"body": [
		  "props: $1"
		],
		"description": "A list/hash of attributes that are exposed to accept data from the parent component"
	},
	"Pass props to an instance during its creation": {
		"prefix": "propsData",
		"body": [
		  "propsData: $1"
		],
		"description": "Pass props to an instance during its creation"
	},
	"Computed properties to be mixed into the Vue instance": {
		"prefix": "computed",
		"body": [
		  "computed: $1"
		],
		"description": "Computed properties to be mixed into the Vue instance"
	},
	"Methods to be mixed into the Vue instance": {
		"prefix": "methods",
		"body": [
		  "methods: $1"
		],
		"description": "Methods to be mixed into the Vue instance"
	},
	"An object where keys are expressions to watch and values are the corresponding callbacks": {
		"prefix": "watch",
		"body": [
		  "watch: $1"
		],
		"description": "An object where keys are expressions to watch and values are the corresponding callbacks"
	},
	"Called after the instance has been mounted, where el is replaced by the newly created vm.$el": {
		"prefix": "mounted",
		"body": [
		  "mounted: $1"
		],
		"description": "Called after the instance has been mounted, where el is replaced by the newly created vm.$el"
	},
	"Create Key value pair by colon (:)": {
		"prefix": ":",
		"body": [
		  ": $1"
		],
		"description": "Create Key value pair by colon (:)"
	},
	"Define a new component": {
		"prefix": "Vue.component",
		"body": [
		  "Vue.component($1)"
		],
		"description": "Define a new component"
	},
	"A string template to be used as the markup for the Vue instance": {
		"prefix": "template",
		"body": [
		  "template$1"
		],
		"description": "A string template to be used as the markup for the Vue instance"
	},
	"An alternative to string templates allowing you to leverage the full programmatic power of JavaScript": {
		"prefix": "render:",
		"body": [
		  "render: $1"
		],
		"description": "An alternative to string templates allowing you to leverage the full programmatic power of JavaScript"
	},
	"Called after a data change causes the virtual DOM to be re-rendered and patched": {
		"prefix": "updated:",
		"body": [
		  "updated: $1"
		],
		"description": "Called after a data change causes the virtual DOM to be re-rendered and patched"
	},
	"The mixins option accepts an array of mixin objects": {
		"prefix": "mixins:",
		"body": [
		  "mixins: $1"
		],
		"description": "The mixins option accepts an array of mixin objects"
	},
	"Allows declaratively extending another component (could be either a plain options object or a constructor) without having to use Vue.extend": {
		"prefix": "extends:",
		"body": [
		  "extends: $1"
		],
		"description": "Allows declaratively extending another component (could be either a plain options object or a constructor) without having to use Vue.extend"
	},
	"Provide is primarily provided for advanced plugin / component library use cases": {
		"prefix": "provide:",
		"body": [
		  "provide: $1"
		],
		"description": "provide is primarily provided for advanced plugin / component library use cases"
	},
	"Inject is primarily provided for advanced plugin / component library use cases": {
		"prefix": "inject:",
		"body": [
		  "inject: $1"
		],
		"description": "inject is primarily provided for advanced plugin / component library use cases"
	}

}